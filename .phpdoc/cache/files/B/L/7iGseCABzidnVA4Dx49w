1714068344
waR3U4bTeM%3A8dab1ccec64dc04a454c56ff42072471-6d2e59888f0fe34eb2215da41caac57d
s:13920:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjZkMmU1OTg4OGYwZmUzNGViMjIxNWRhNDFjYWFjNTdkIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTE6InNlc3Npb24ucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NjA6InZlbmRvci9zeW1mb255L2ZyYW1ld29yay1idW5kbGUvUmVzb3VyY2VzL2NvbmZpZy9zZXNzaW9uLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6OTIxNzoiPD9waHAKCi8qCiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBTeW1mb255IHBhY2thZ2UuCiAqCiAqIChjKSBGYWJpZW4gUG90ZW5jaWVyIDxmYWJpZW5Ac3ltZm9ueS5jb20+CiAqCiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFCiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLgogKi8KCm5hbWVzcGFjZSBTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3I7Cgp1c2UgU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXFNlc3Npb25cRGVwcmVjYXRlZFNlc3Npb25GYWN0b3J5Owp1c2UgU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXFNlc3Npb25cU2VydmljZVNlc3Npb25GYWN0b3J5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxBdHRyaWJ1dGVcQXR0cmlidXRlQmFnOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxGbGFzaFxGbGFzaEJhZzsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cRmxhc2hcRmxhc2hCYWdJbnRlcmZhY2U7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFNlc3Npb247CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFNlc3Npb25GYWN0b3J5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTZXNzaW9uSW50ZXJmYWNlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXEhhbmRsZXJcQWJzdHJhY3RTZXNzaW9uSGFuZGxlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxIYW5kbGVyXElkZW50aXR5TWFyc2hhbGxlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxIYW5kbGVyXE1hcnNoYWxsaW5nU2Vzc2lvbkhhbmRsZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcSGFuZGxlclxOYXRpdmVGaWxlU2Vzc2lvbkhhbmRsZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcSGFuZGxlclxTZXNzaW9uSGFuZGxlckZhY3Rvcnk7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcSGFuZGxlclxTdHJpY3RTZXNzaW9uSGFuZGxlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxNZXRhZGF0YUJhZzsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxNb2NrRmlsZVNlc3Npb25TdG9yYWdlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXE1vY2tGaWxlU2Vzc2lvblN0b3JhZ2VGYWN0b3J5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXE5hdGl2ZVNlc3Npb25TdG9yYWdlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXE5hdGl2ZVNlc3Npb25TdG9yYWdlRmFjdG9yeTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxQaHBCcmlkZ2VTZXNzaW9uU3RvcmFnZTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxQaHBCcmlkZ2VTZXNzaW9uU3RvcmFnZUZhY3Rvcnk7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcU2Vzc2lvblN0b3JhZ2VJbnRlcmZhY2U7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwS2VybmVsXEV2ZW50TGlzdGVuZXJcU2Vzc2lvbkxpc3RlbmVyOwoKcmV0dXJuIHN0YXRpYyBmdW5jdGlvbiAoQ29udGFpbmVyQ29uZmlndXJhdG9yICRjb250YWluZXIpIHsKICAgICRjb250YWluZXItPnBhcmFtZXRlcnMoKS0+c2V0KCdzZXNzaW9uLm1ldGFkYXRhLnN0b3JhZ2Vfa2V5JywgJ19zZjJfbWV0YScpOwoKICAgICRjb250YWluZXItPnNlcnZpY2VzKCkKICAgICAgICAtPnNldCgnLnNlc3Npb24uZG8tbm90LXVzZScsIFNlc3Npb246OmNsYXNzKSAvLyB0byBiZSByZW1vdmVkIGluIDYuMAogICAgICAgICAgICAtPmZhY3RvcnkoW3NlcnZpY2UoJ3Nlc3Npb24uZmFjdG9yeScpLCAnY3JlYXRlU2Vzc2lvbiddKQogICAgICAgIC0+c2V0KCdzZXNzaW9uLmZhY3RvcnknLCBTZXNzaW9uRmFjdG9yeTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdyZXF1ZXN0X3N0YWNrJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeScpLAogICAgICAgICAgICAgICAgW3NlcnZpY2UoJ3Nlc3Npb25fbGlzdGVuZXInKSwgJ29uU2Vzc2lvblVzYWdlJ10sCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeS5uYXRpdmUnLCBOYXRpdmVTZXNzaW9uU3RvcmFnZUZhY3Rvcnk6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgcGFyYW0oJ3Nlc3Npb24uc3RvcmFnZS5vcHRpb25zJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLmhhbmRsZXInKSwKICAgICAgICAgICAgICAgIGlubGluZV9zZXJ2aWNlKE1ldGFkYXRhQmFnOjpjbGFzcykKICAgICAgICAgICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS5zdG9yYWdlX2tleScpLAogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS51cGRhdGVfdGhyZXNob2xkJyksCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBmYWxzZSwKICAgICAgICAgICAgXSkKICAgICAgICAtPnNldCgnc2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkucGhwX2JyaWRnZScsIFBocEJyaWRnZVNlc3Npb25TdG9yYWdlRmFjdG9yeTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLmhhbmRsZXInKSwKICAgICAgICAgICAgICAgIGlubGluZV9zZXJ2aWNlKE1ldGFkYXRhQmFnOjpjbGFzcykKICAgICAgICAgICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS5zdG9yYWdlX2tleScpLAogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS51cGRhdGVfdGhyZXNob2xkJyksCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBmYWxzZSwKICAgICAgICAgICAgXSkKICAgICAgICAtPnNldCgnc2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkubW9ja19maWxlJywgTW9ja0ZpbGVTZXNzaW9uU3RvcmFnZUZhY3Rvcnk6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgcGFyYW0oJ2tlcm5lbC5jYWNoZV9kaXInKS4nL3Nlc3Npb25zJywKICAgICAgICAgICAgICAgICdNT0NLU0VTU0lEJywKICAgICAgICAgICAgICAgIGlubGluZV9zZXJ2aWNlKE1ldGFkYXRhQmFnOjpjbGFzcykKICAgICAgICAgICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS5zdG9yYWdlX2tleScpLAogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS51cGRhdGVfdGhyZXNob2xkJyksCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pCiAgICAgICAgLT5zZXQoJ3Nlc3Npb24uc3RvcmFnZS5mYWN0b3J5LnNlcnZpY2UnLCBTZXJ2aWNlU2Vzc2lvbkZhY3Rvcnk6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgnc2Vzc2lvbi5zdG9yYWdlJyksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+ZGVwcmVjYXRlKCdzeW1mb255L2ZyYW1ld29yay1idW5kbGUnLCAnNS4zJywgJ1RoZSAiJXNlcnZpY2VfaWQlIiBzZXJ2aWNlIGlzIGRlcHJlY2F0ZWQsIHVzZSAic2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkubmF0aXZlIiwgInNlc3Npb24uc3RvcmFnZS5mYWN0b3J5LnBocF9icmlkZ2UiIG9yICJzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeS5tb2NrX2ZpbGUiIGluc3RlYWQuJykKCiAgICAgICAgLT5zZXQoJy5zZXNzaW9uLmRlcHJlY2F0ZWQnLCBTZXNzaW9uSW50ZXJmYWNlOjpjbGFzcykgLy8gdG8gYmUgcmVtb3ZlZCBpbiA2LjAKICAgICAgICAgICAgLT5mYWN0b3J5KFtpbmxpbmVfc2VydmljZShEZXByZWNhdGVkU2Vzc2lvbkZhY3Rvcnk6OmNsYXNzKS0+YXJncyhbc2VydmljZSgncmVxdWVzdF9zdGFjaycpXSksICdnZXRTZXNzaW9uJ10pCiAgICAgICAgLT5hbGlhcyhTZXNzaW9uSW50ZXJmYWNlOjpjbGFzcywgJy5zZXNzaW9uLmRvLW5vdC11c2UnKQogICAgICAgICAgICAtPmRlcHJlY2F0ZSgnc3ltZm9ueS9mcmFtZXdvcmstYnVuZGxlJywgJzUuMycsICdUaGUgIiVhbGlhc19pZCUiIGFuZCAiU2Vzc2lvbkludGVyZmFjZSIgYWxpYXNlcyBhcmUgZGVwcmVjYXRlZCwgdXNlICIkcmVxdWVzdFN0YWNrLT5nZXRTZXNzaW9uKCkiIGluc3RlYWQuJykKICAgICAgICAtPmFsaWFzKFNlc3Npb25TdG9yYWdlSW50ZXJmYWNlOjpjbGFzcywgJ3Nlc3Npb24uc3RvcmFnZScpCiAgICAgICAgICAgIC0+ZGVwcmVjYXRlKCdzeW1mb255L2ZyYW1ld29yay1idW5kbGUnLCAnNS4zJywgJ1RoZSAiJWFsaWFzX2lkJSIgYWxpYXMgaXMgZGVwcmVjYXRlZCwgdXNlICJzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeSIgaW5zdGVhZC4nKQogICAgICAgIC0+YWxpYXMoXFNlc3Npb25IYW5kbGVySW50ZXJmYWNlOjpjbGFzcywgJ3Nlc3Npb24uaGFuZGxlcicpCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLnN0b3JhZ2UubWV0YWRhdGFfYmFnJywgTWV0YWRhdGFCYWc6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgcGFyYW0oJ3Nlc3Npb24ubWV0YWRhdGEuc3RvcmFnZV9rZXknKSwKICAgICAgICAgICAgICAgIHBhcmFtKCdzZXNzaW9uLm1ldGFkYXRhLnVwZGF0ZV90aHJlc2hvbGQnKSwKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT5kZXByZWNhdGUoJ3N5bWZvbnkvZnJhbWV3b3JrLWJ1bmRsZScsICc1LjMnLCAnVGhlICIlc2VydmljZV9pZCUiIHNlcnZpY2UgaXMgZGVwcmVjYXRlZCwgY3JlYXRlIHlvdXIgb3duICJzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeSIgaW5zdGVhZC4nKQoKICAgICAgICAtPnNldCgnc2Vzc2lvbi5zdG9yYWdlLm5hdGl2ZScsIE5hdGl2ZVNlc3Npb25TdG9yYWdlOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHBhcmFtKCdzZXNzaW9uLnN0b3JhZ2Uub3B0aW9ucycpLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2Vzc2lvbi5oYW5kbGVyJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLnN0b3JhZ2UubWV0YWRhdGFfYmFnJyksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+ZGVwcmVjYXRlKCdzeW1mb255L2ZyYW1ld29yay1idW5kbGUnLCAnNS4zJywgJ1RoZSAiJXNlcnZpY2VfaWQlIiBzZXJ2aWNlIGlzIGRlcHJlY2F0ZWQsIHVzZSAic2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkubmF0aXZlIiBpbnN0ZWFkLicpCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLnN0b3JhZ2UucGhwX2JyaWRnZScsIFBocEJyaWRnZVNlc3Npb25TdG9yYWdlOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3Nlc3Npb24uaGFuZGxlcicpLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2Vzc2lvbi5zdG9yYWdlLm1ldGFkYXRhX2JhZycpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPmRlcHJlY2F0ZSgnc3ltZm9ueS9mcmFtZXdvcmstYnVuZGxlJywgJzUuMycsICdUaGUgIiVzZXJ2aWNlX2lkJSIgc2VydmljZSBpcyBkZXByZWNhdGVkLCB1c2UgInNlc3Npb24uc3RvcmFnZS5mYWN0b3J5LnBocF9icmlkZ2UiIGluc3RlYWQuJykKCiAgICAgICAgLT5zZXQoJ3Nlc3Npb24uZmxhc2hfYmFnJywgRmxhc2hCYWc6OmNsYXNzKQogICAgICAgICAgICAtPmZhY3RvcnkoW3NlcnZpY2UoJy5zZXNzaW9uLmRvLW5vdC11c2UnKSwgJ2dldEZsYXNoQmFnJ10pCiAgICAgICAgICAgIC0+ZGVwcmVjYXRlKCdzeW1mb255L2ZyYW1ld29yay1idW5kbGUnLCAnNS4xJywgJ1RoZSAiJXNlcnZpY2VfaWQlIiBzZXJ2aWNlIGlzIGRlcHJlY2F0ZWQsIHVzZSAiJHNlc3Npb24tPmdldEZsYXNoQmFnKCkiIGluc3RlYWQuJykKICAgICAgICAtPmFsaWFzKEZsYXNoQmFnSW50ZXJmYWNlOjpjbGFzcywgJ3Nlc3Npb24uZmxhc2hfYmFnJykKCiAgICAgICAgLT5zZXQoJ3Nlc3Npb24uYXR0cmlidXRlX2JhZycsIEF0dHJpYnV0ZUJhZzo6Y2xhc3MpCiAgICAgICAgICAgIC0+ZmFjdG9yeShbc2VydmljZSgnLnNlc3Npb24uZG8tbm90LXVzZScpLCAnZ2V0QmFnJ10pCiAgICAgICAgICAgIC0+YXJncyhbJ2F0dHJpYnV0ZXMnXSkKICAgICAgICAgICAgLT5kZXByZWNhdGUoJ3N5bWZvbnkvZnJhbWV3b3JrLWJ1bmRsZScsICc1LjEnLCAnVGhlICIlc2VydmljZV9pZCUiIHNlcnZpY2UgaXMgZGVwcmVjYXRlZCwgdXNlICIkc2Vzc2lvbi0+Z2V0QXR0cmlidXRlQmFnKCkiIGluc3RlYWQuJykKCiAgICAgICAgLT5zZXQoJ3Nlc3Npb24uc3RvcmFnZS5tb2NrX2ZpbGUnLCBNb2NrRmlsZVNlc3Npb25TdG9yYWdlOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHBhcmFtKCdrZXJuZWwuY2FjaGVfZGlyJykuJy9zZXNzaW9ucycsCiAgICAgICAgICAgICAgICAnTU9DS1NFU1NJRCcsCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLnN0b3JhZ2UubWV0YWRhdGFfYmFnJyksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+ZGVwcmVjYXRlKCdzeW1mb255L2ZyYW1ld29yay1idW5kbGUnLCAnNS4zJywgJ1RoZSAiJXNlcnZpY2VfaWQlIiBzZXJ2aWNlIGlzIGRlcHJlY2F0ZWQsIHVzZSAic2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkubW9ja19maWxlIiBpbnN0ZWFkLicpCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLmhhbmRsZXIubmF0aXZlJywgU3RyaWN0U2Vzc2lvbkhhbmRsZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgaW5saW5lX3NlcnZpY2UoXFNlc3Npb25IYW5kbGVyOjpjbGFzcyksCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLmhhbmRsZXIubmF0aXZlX2ZpbGUnLCBTdHJpY3RTZXNzaW9uSGFuZGxlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBpbmxpbmVfc2VydmljZShOYXRpdmVGaWxlU2Vzc2lvbkhhbmRsZXI6OmNsYXNzKQogICAgICAgICAgICAgICAgICAgIC0+YXJncyhbcGFyYW0oJ3Nlc3Npb24uc2F2ZV9wYXRoJyldKSwKICAgICAgICAgICAgXSkKCiAgICAgICAgLT5zZXQoJ3Nlc3Npb24uYWJzdHJhY3RfaGFuZGxlcicsIEFic3RyYWN0U2Vzc2lvbkhhbmRsZXI6OmNsYXNzKQogICAgICAgICAgICAtPmZhY3RvcnkoW1Nlc3Npb25IYW5kbGVyRmFjdG9yeTo6Y2xhc3MsICdjcmVhdGVIYW5kbGVyJ10pCiAgICAgICAgICAgIC0+YXJncyhbYWJzdHJhY3RfYXJnKCdBIHN0cmluZyBvciBhIGNvbm5lY3Rpb24gb2JqZWN0JyldKQoKICAgICAgICAtPnNldCgnc2Vzc2lvbl9saXN0ZW5lcicsIFNlc3Npb25MaXN0ZW5lcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlX2xvY2F0b3IoWwogICAgICAgICAgICAgICAgICAgICdzZXNzaW9uX2ZhY3RvcnknID0+IHNlcnZpY2UoJ3Nlc3Npb24uZmFjdG9yeScpLT5pZ25vcmVPbkludmFsaWQoKSwKICAgICAgICAgICAgICAgICAgICAnc2Vzc2lvbicgPT4gc2VydmljZSgnLnNlc3Npb24uZG8tbm90LXVzZScpLT5pZ25vcmVPbkludmFsaWQoKSwKICAgICAgICAgICAgICAgICAgICAnaW5pdGlhbGl6ZWRfc2Vzc2lvbicgPT4gc2VydmljZSgnLnNlc3Npb24uZG8tbm90LXVzZScpLT5pZ25vcmVPblVuaW5pdGlhbGl6ZWQoKSwKICAgICAgICAgICAgICAgICAgICAnbG9nZ2VyJyA9PiBzZXJ2aWNlKCdsb2dnZXInKS0+aWdub3JlT25JbnZhbGlkKCksCiAgICAgICAgICAgICAgICAgICAgJ3Nlc3Npb25fY29sbGVjdG9yJyA9PiBzZXJ2aWNlKCdkYXRhX2NvbGxlY3Rvci5yZXF1ZXN0LnNlc3Npb25fY29sbGVjdG9yJyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBwYXJhbSgna2VybmVsLmRlYnVnJyksCiAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5zdG9yYWdlLm9wdGlvbnMnKSwKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT50YWcoJ2tlcm5lbC5ldmVudF9zdWJzY3JpYmVyJykKICAgICAgICAgICAgLT50YWcoJ2tlcm5lbC5yZXNldCcsIFsnbWV0aG9kJyA9PiAncmVzZXQnXSkKCiAgICAgICAgLy8gZm9yIEJDCiAgICAgICAgLT5hbGlhcygnc2Vzc2lvbi5zdG9yYWdlLmZpbGVzeXN0ZW0nLCAnc2Vzc2lvbi5zdG9yYWdlLm1vY2tfZmlsZScpCiAgICAgICAgICAgIC0+ZGVwcmVjYXRlKCdzeW1mb255L2ZyYW1ld29yay1idW5kbGUnLCAnNS4zJywgJ1RoZSAiJWFsaWFzX2lkJSIgYWxpYXMgaXMgZGVwcmVjYXRlZCwgdXNlICJzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeS5tb2NrX2ZpbGUiIGluc3RlYWQuJykKCiAgICAgICAgLT5zZXQoJ3Nlc3Npb24ubWFyc2hhbGxlcicsIElkZW50aXR5TWFyc2hhbGxlcjo6Y2xhc3MpCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLm1hcnNoYWxsaW5nX2hhbmRsZXInLCBNYXJzaGFsbGluZ1Nlc3Npb25IYW5kbGVyOjpjbGFzcykKICAgICAgICAgICAgLT5kZWNvcmF0ZSgnc2Vzc2lvbi5oYW5kbGVyJykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3Nlc3Npb24ubWFyc2hhbGxpbmdfaGFuZGxlci5pbm5lcicpLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2Vzc2lvbi5tYXJzaGFsbGVyJyksCiAgICAgICAgICAgIF0pCiAgICA7Cn07CiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjE6e3M6NTg6IlxTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3IiO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo1ODoiXFN5bWZvbnlcQ29tcG9uZW50XERlcGVuZGVuY3lJbmplY3Rpb25cTG9hZGVyXENvbmZpZ3VyYXRvciI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEyOiJDb25maWd1cmF0b3IiO319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";